import datetime
import os
from base64 import b64encode
from io import BytesIO

import streamlit as st
from datetime import date, datetime
from PyPDF2 import PdfReader
import my_classes
from my_classes import Person, Passport

st.set_page_config(page_title='–ë–ª–∞–Ω–∫ –î–ö–ü', page_icon='üìù')
hide_menu_style = """
        <style>
        #MainMenu {visibility: hidden;}
        </style>
        """
st.markdown(hide_menu_style, unsafe_allow_html=True)
# st.header('–ë–ª–∞–Ω–∫ –î–ö–ü')

# --------- –®–∞–ø–∫–∞ –¥–æ–≥–æ–≤–æ—Ä–∞ -----------------------
data = st.date_input(label='–î–∞—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞')
place = st.text_input(label='–ú–µ—Å—Ç–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞', value='–£—Å—Å—É—Ä–∏–π—Å–∫')

# ----------- –ë–ª–æ–∫ –ø—Ä–æ–¥–∞–≤—Ü–∞ -----------------------------------
expander_seller = st.expander('–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–≤—Ü–∞:')
seller = Person()
with expander_seller:
    seller.fio = st.text_input(label='–§–∏–æ', placeholder='–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ', label_visibility='hidden').title()
    # –§–æ—Ä–º–∞ —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ –¥–ª—è –≤–≤–æ–¥–∞ —Å–µ—Ä–∏–∏ –Ω–æ–º–µ—Ä–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞, –¥–∞—Ç—ã –≤—ã–¥–∞—á–∏ –∏ –Ω–∞ —Å—Ç—Ä–æ–∫–µ –Ω–∏–∂–µ - –∫–µ–º –≤—ã–¥–∞–Ω–æ
    # st.write('–ü–∞—Å–ø–æ—Ä—Ç')
    passport_seller = Passport()
    scol1, scol2, scol3 = st.columns(3)
    with scol1:
        passport_seller.seria = st.text_input('—Å–µ—Ä–∏—è', placeholder='—Å–µ—Ä–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞', label_visibility='hidden')
    with scol2:
        passport_seller.number = st.text_input('–Ω–æ–º–µ—Ä', placeholder='–Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞', label_visibility='hidden')
    with scol3:
        # max_date = date(date.today().year-18, date.today().month, date.today().day)
        passport_seller.date_of = st.date_input(label='–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏', min_value=date(1930, 1, 1))
    passport_seller.kemvidan = st.text_input('–ö–µ–º –≤—ã–¥–∞–Ω', placeholder='–ö–µ–º –≤—ã–¥–∞–Ω', label_visibility='hidden')
    seller.addres = st.text_input(label='–ê–¥—Ä–µ—Å', placeholder='–ê–¥—Ä–µ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–ø—Ä–æ–ø–∏—Å–∫–∞)', label_visibility='hidden')
    seller.passport = passport_seller

# ----------- –ë–ª–æ–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è -----------------------------------
expander_buyer = st.expander('–î–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:')
buyer = Person()
with expander_buyer:
    buyer.fio = st.text_input(label='–§–∏–æ1', placeholder='–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ', label_visibility='hidden').title()
    # –§–æ—Ä–º–∞ —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ –¥–ª—è –≤–≤–æ–¥–∞ —Å–µ—Ä–∏–∏ –Ω–æ–º–µ—Ä–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞, –¥–∞—Ç—ã –≤—ã–¥–∞—á–∏ –∏ –Ω–∞ —Å—Ç—Ä–æ–∫–µ –Ω–∏–∂–µ - –∫–µ–º –≤—ã–¥–∞–Ω–æ
    # st.write('–ü–∞—Å–ø–æ—Ä—Ç')
    passport_buyer = Passport()
    bcol1, bcol2, bcol3 = st.columns(3)
    with bcol1:
        passport_buyer.seria = st.text_input('—Å–µ—Ä–∏—è1', placeholder='—Å–µ—Ä–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞', label_visibility='hidden')
    with bcol2:
        passport_buyer.number = st.text_input('–Ω–æ–º–µ—Ä1', placeholder='–Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞', label_visibility='hidden')
    with bcol3:
        # max_date = date(date.today().year-18, date.today().month, date.today().day)
        passport_buyer.date_of = st.date_input(label='–îa—Ç–∞ –≤—ã–¥–∞—á–∏', min_value=date(1930, 1, 1))
    passport_buyer.kemvidan = st.text_input('–ö–µ–º –≤—ã–¥–∞–Ω1', placeholder='–ö–µ–º –≤—ã–¥–∞–Ω', label_visibility='hidden')
    buyer.addres = st.text_input(label='–ê–¥—Ä–µ—Å1', placeholder='–ê–¥—Ä–µ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–ø—Ä–æ–ø–∏—Å–∫–∞)', label_visibility='hidden')
    buyer.passport = passport_buyer

# --------------------- –ë–ª–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ü–¢–° -----------------------------------
have_pts = st.checkbox('–£ –º–µ–Ω—è –µ—Å—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª –≠–ü–¢–°')
epts = my_classes.Epts()
is_ok_pts = False
if have_pts:
    up_file = st.file_uploader('–ó–∞–≥—Ä—É–∑–∏—Ç—å –≠–ü–¢–°', 'pdf')
    if up_file:
        is_ok_pts = my_classes.check_original_pts(up_file)['OK']
        text_first_page = my_classes.check_original_pts(up_file)['text']
        if not is_ok_pts:
            st.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≠–ü–¢–°!!!')
        else:
            st.success('–≠–ü–¢–° —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω.')
            epts = my_classes.parse_pts(text_first_page, epts)

# --------------- –ë–ª–æ–∫ –ü–¢–° -----------------------------
expander_pts = st.expander('–î–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞', is_ok_pts)
with expander_pts:
    ecol1, ecol2, ecol7 = st.columns(3)
    with ecol1:
        if is_ok_pts:
            br_mod = st.text_input('–ú–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å –¢–°:', value=f'{epts.brand} {epts.model}')
        else:
            br_mod = st.text_input('–ú–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å –¢–°:')
        if len(br_mod.split()) > 1:
            epts.brand = br_mod.split()[0].upper()
            epts.model = ' '.join(br_mod.split()[1:]).upper()
        else:
            st.warning('–ü–æ–ª–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞.')
        #  st.text(f'{epts.brand} {epts.model}')
    with ecol2:
        epts.vin = st.text_input('–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä (VIN):', value=epts.vin).upper()
    with ecol7:
        epts.cabin = st.text_input('‚Ññ –∫—É–∑–æ–≤–∞:', value=epts.cabin).upper()
    ecol3, ecol4, ecol5, ecol6 = st.columns(4)
    with ecol3:
        epts.year = st.text_input('–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞:', value=epts.year)
    with ecol4:
        epts.engine = st.text_input('‚Ññ –¥–≤–∏–≥–∞—Ç–µ–ª—è:', value=epts.engine).upper()
    with ecol5:
        epts.rama = st.text_input('‚Ññ —à–∞—Å—Å–∏(—Ä–∞–º—ã):', value=epts.rama)
    with ecol6:
        epts.color = st.text_input('–¶–≤–µ—Ç:', value=epts.color)
    ecol8, ecol9, ecol10 = st.columns(3)
    with ecol8:
        epts.number = st.text_input('‚Ññ –ï–ü–¢–°:', value=epts.number)
    with ecol9:
        epts.organisation = st.text_input('–û—Ä–≥–∞–Ω –≤—ã–¥–∞–≤—à–∏–π –ï–ü–¢–°:', value=epts.organisation)
    with ecol10:
        if epts.data:
            epts.data = st.date_input('–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏:', value=epts.data)
        else:
            epts.data = st.date_input('–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏:')
    # st.write(epts)

# ---- –ë–ª–æ–∫ —Å —Ü–µ–Ω–æ–π –Ω–∞ –∞–≤—Ç–æ -------------------
car_price = st.number_input('–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞', min_value=1)

is_docx = False
if st.button('–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å'):
    # ------ –≤—Å—è–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ—Å—Ç–∏ ---------
    err_seller = my_classes.check_person(seller)
    err_buyer = my_classes.check_person(buyer)
    err_eptr = my_classes.check_epts(epts)
    if err_seller != '':
        st.error(err_seller)
        st.stop()
    if err_buyer != '':
        st.error(err_buyer)
        st.stop()
    if err_eptr != '':
        st.error(err_eptr)
        st.stop()

    # ----------–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ----------
    is_docx = my_classes.make_dkp_docx(data, place, seller, buyer, epts, car_price)

if is_docx:
    st.success('üëáüëáüëá –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. –°–∫–∞—á–∞—Ç—å –º–æ–∂–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ ')
    mime = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
    filename = f'{epts.vin}.docx'
    with open(filename, 'rb') as file:
        st.download_button(
            label='–°–∫–∞—á–∞—Ç—å –î–ö–ü',
            data=file,
            mime=mime,
            file_name=filename
        )
    os.remove(filename)